1. 자바의 타입
- Primitive Type : int, long, float, double
- Reference Type : Integer, Long, Float, Double
연산 속도 Primitive > Refence

// 프리미티브 타입 사용법
int i = 0;
long[] longs = new long[10];
float f = 10.5f;
double d = 10 / 3.0;

// 레퍼런스 타입 사용법(꼭 필요한 경우가 아니면 권장하지 않음)
Integer I = 0;
Long[] Longs = new Long[10];
Float F = 10.5f;
Double D = 10 / 3.0;

// 올바른 코드
ArrayList<Integer> arrayList = new ArrayList<>();
Stack<Long> stack = new Stack<>();
Queue<Float> queue = new ArrayDeque<>();
ArrayDeque<Double> arrayDeque = new ArrayDeque<>();

2. 컬렉션 프레임워크
2.1 배열 - 저장할 데이터의 개수가 정해져 있을 때 사용하기에 유용

int[] array = { 1, 2, 3, 4, 5 };
int[] array2 = new int[] { 1, 3, 5, 7, 9 };
int[] array3 = new int[5];

array3[0] = 0; //인덱스 접근
array3[1] = 2;
array3[2] = 4;
array3[3] = 6;
array3[4] = 8;

Arrays.toString(array) 을 사용하면 배열 요소 추출 가능 // [1, 2, 3, 4, 5]

2.2 리스트 - ArrayList는 가변 크기이므로 새 데이터의 삽입 혹은 기존 데이터의 삭제를 할 수 있음

// 리스트 객체 생성
ArrayList<Integer> list = new ArrayList<>();
// 값 추가
list.add(1);
list.add(2);
list.add(4);
list.add(6); // ❶

System.out.println(list.get(2)); // ❷ 4, 인덱스로 값에 접근

2.3 해시맵 -  키(Key)와 값(Value) 쌍을 저장하는 해시 테이블
HashMap<String, Integer> map = new HashMap<>();
// 해시맵 값 삽입
map.put("apple", 1);
map.put("banana", 2);
map.put("orange", 3);
// 해시맵 값 출력
System.out.println(map); // {banana=2, orange=3, apple=1}

String key = "apple";

if (map.containsKey(key)) {
  int value = map.get(key);
  System.out.println(key + ": " + value); // apple: 1
}
else {
  System.out.println(key + "는 해시맵에 없습니다.");
}

//수정할거면 그냥 똑같이 put하면 엎어치기됨
map.put("banana", 4);
System.out.println(map); // {banana=4, orange=3, apple=1}
//삭제는 remove
map.remove("orange");

2.4 문자열
String string = "Hello";
string = string.replace("l", ""); // "l"을 모두 삭제
System.out.println(string); // "Heo"

문자열은 값을 변경할 수 없는 Immutable 객체
String s = "abc";
// s += "def"; 를 하게되면 다른 객체를 생성하여 s를 복사 후 "def"를 붙여 비효율적인 코드가 됨

StringBuilder, StringBuffer - 뮤터블하므로 값을 변경할 때 시간 복잡도 관점에서 훨씬 더 효율적

// StringBuilder 객체 생성
StringBuilder sb = new StringBuilder();

// 문자열 Add
sb.append(10);
sb.append("ABC");

// 출력
System.out.println(sb); // 10ABC
sb.deleteCharAt(3);     // 3번째 인덱스 문자 삭제
System.out.println(sb); // 10AC
sb.insert(1, 2);        // 1번째 인덱스에 2라는 문자 추가
System.out.println(sb); // 120AC

3. 매서드 - 클래스 내부에 정의한 함수
public static void main(String[] args) {
  // 함수를 호출하여 결과 출력
  int ret = add(5, 10);
  System.out.println(ret);
}

public static int add(int num1, int num2) {
  int result = num1 + num2;
  return result;
}

람다식 - 1회용 함수

private static class Node {
  int dest, cost;

  public Node(int dest, int cost) {
    this.dest = dest;
    this.cost = cost;
  }
}

public static void main(String[] args) {
  Node[] nodes = new Node[5];
  nodes[0] = new Node(1, 10);
  nodes[1] = new Node(2, 20);
  nodes[2] = new Node(3, 15);
  nodes[3] = new Node(4, 5);
  nodes[4] = new Node(1, 25);
  Arrays.sort(nodes, (o1, o2) -> Integer.compare(o1.cost, o2.cost)); // 아래 식과 같은 표현
/*
  Arrays.sort(nodes, new Comparator<Node>() {
    @Override
    public int compare(Node o1, Node o2) {
      return Integer.compare(o1.cost, o2.cost);
    }
  }); */
}



4. 코딩테스트 팁!!
4.1 조기 반환
public static void main(String[] args) {
  System.out.println(totalPrice(4, 50));
}

static int totalPrice(int quantity, int price) {
  int total = quantity * price; // ➊
  if (total > 100) // ➋
    return (int)(total * 0.9); // ❸
  return total;
}

4.2 보호 구문 - 본격적인 로직을 진행하기 전 예외 처리 코드를 추가하는 기법
import java.util.List;

static double calculateAverage(List<Integer> numbers) {
  if (numbers == null) // ➊ null 이면 종료(예외)
    return 0;
  if (numbers.isEmpty()) // ➋ 데이터가 없으면 종료(예외)
    return 0;

  int total = numbers.stream().mapToInt(i -> i).sum(); // ➌ 예외 처리 후 기능 구현
  return (double) total / numbers.size();
}

4.3 제네릭 - 빌드 레벨에서 타입을 체크하여 타입 안정성을 제공하고, 타입 체크와 형변환을 생략할 수 있게 해주어 코드를 간결하게 만들어주는 기능
List list = new ArrayList();
list.add(10);
list.add("abc");

int sum1 = (int)list.get(0) + (int)list.get(1); // ➊ 런타임 오류 발생

List<Integer> genericList = new ArrayList<>();
genericList.add(10);
genericList.add("abc"); // ➋ 문법(빌드 레벨) 오류 발생

int sum2 = genericList.get(0) + genericList.get(1);
